-- TASK 
-- Нужно объединить данные двух таблиц: track со всеми треками в магазине и invoice_line с купленными треками. 
-- Выгрузите таблицу с названием трека и числом, которое соответствует тому, сколько раз трек покупали. Учитывайте, что в одном заказе один и тот же трек может встречаться несколько раз. Если какой-либо из треков не покупали или о купленном треке нет информации — такие записи не должны войти в таблицу. Оставьте только уникальные значения и отберите первые 20 записей.

SELECT t.name AS track_name,
       COUNT(*) 
FROM track AS t
INNER JOIN invoice_line AS i ON  t.track_id = i.track_id
GROUP BY track_name
LIMIT 20;

-- TASK
-- Нужно дополнить запрос: добавьте поле с идентификатором плейлиста playlist_id. Такое поле можно получить из таблицы playlist_track. В этой таблице собраны идентификаторы плейлистов и треков (поле track_id). Условие остаётся прежним: если идентификаторы треков не совпадают во всех трёх таблицах, такие треки не должны войти в итоговую таблицу. Выведите первые 20 записей.

SELECT t.name,
       SUM(i.quantity),
       pt.playlist_id 
FROM track AS t
INNER JOIN invoice_line AS i ON t.track_id = i.track_id
INNER JOIN playlist_track  AS pt ON t.track_id = pt.track_id
GROUP BY t.name, pt.playlist_id 
LIMIT 20;

-- TASK
-- Идентификатор плейлиста теперь указан в итоговой таблице. Но что это за плейлисты — непонятно. Эту информацию можно взять в четвёртой таблице — playlist. Таблица содержит поле playlist_id с идентификатором плейлиста и поле name — с его названием. Добавьте в итоговую таблицу поле name. Условия те же: данные без совпадения не должны попасть в таблицу. Ограничьте вывод первыми 20 записями.

SELECT t.name,
       SUM(i.quantity),
       pt.playlist_id,
       p.name AS playlist_name
FROM track AS t
INNER JOIN invoice_line AS i ON t.track_id = i.track_id
INNER JOIN playlist_track AS pt ON t.track_id = pt.track_id
INNER JOIN playlist AS p ON pt.playlist_id = p.playlist_id
GROUP BY t.name, pt.playlist_id, p.name
LIMIT 20;

-- TASK
-- Теперь проанализируйте получившуюся таблицу. Нужно посчитать суммарную стоимость треков для каждого плейлиста. Отобразите в таблице два поля: playlist_name с названием плейлиста и total_revenue с суммарной стоимостью. Отсортируйте данные по значению в поле total_revenue от большего к меньшему.

SELECT 
      SUM(t.unit_price) AS total_revenue, 
      p.name AS playlist_name
FROM track AS t
INNER JOIN invoice_line AS i ON t.track_id=i.track_id
INNER JOIN playlist_track AS pl ON t.track_id=pl.track_id
INNER JOIN playlist AS p ON pl.playlist_id = p.playlist_id
GROUP BY playlist_name
ORDER BY total_revenue DESC;

-- TASK
--  Выведите на экран два поля: одно с названием жанра, второе — с количеством купленных треков этого жанра. Отсортируйте таблицу по убыванию количества заказов.

SELECT g.name,
       COUNT(i.quantity) AS count
FROM invoice_line AS i
INNER JOIN track AS t ON t.track_id = i.track_id
INNER JOIN genre AS g ON g.genre_id = t.genre_id
GROUP BY g.name
ORDER BY count DESC;

-- TASK
-- Отберите названия уникальных категорий фильмов, в которых снималась Ума Вуд (англ. Uma Wood).

SELECT DISTINCT c.name
FROM movie AS m
INNER JOIN film_category AS f ON f.film_id = m.film_id
INNER JOIN category AS c ON c.category_id = f.category_id
INNER JOIN film_actor AS fa ON fa.film_id = f.film_id
INNER JOIN actor AS a ON a.actor_id = fa.actor_id
WHERE a.last_name LIKE '%Wood%'
AND a.first_name LIKE '%Uma%';
